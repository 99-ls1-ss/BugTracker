@model BugTracker.Models.DashboardModel
@using Microsoft.AspNet.Identity;
@{
    ViewBag.Title = "Dashboard";
    ViewBag.Menu = "Dashboard";

}

@if (!Request.IsAuthenticated) {
    <section class="section colored-wrapper">
        <div class="container home-landing">
            <div class="wrapper-2">
                <div class="row">
                    <h1><span>Welcome to The Bugtracker</span></h1>
                    @*<h3>You are not logged in.  Please login or create an account.</h3>*@
                    <div class="landing-page"></div>
                </div>
            </div>
        </div>
    </section>
}
else {


    <!-- Tickets -->
    <section class="section colored-wrapper">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                    @if (User.IsInRole("Admin") || User.IsInRole("Guest")) {
                        <h4><span>CURRENT NUMBER OF ACTIVE TICKETS: @Model.Tickets.Where(s => s.TicketStatusId != 4).Count()</span></h4>
                    }
                    else {
                        <h4><span>CURRENT NUMBER OF TICKETS ASSIGNED TO YOU: @Model.Tickets.Where(s => (s.TicketStatusId != 4 && s.AssignedToUserId == User.Identity.GetUserId())).Count()</span></h4>
                    }
                    
                </div>
            </div>
            <div class="row box-gradient box-red">
                <div class="col-xs-6 col-sm-2-5">
                    <a href="@Url.Action("Index","Tickets",new {priorityId = 1})">
                        <i class="fa fa-bomb fa-4x"></i>
                        <h2 class="countTo font-raleway timer" id="myBlockerCount">0</h2>
                        <p>BLOCKER TICKETS</p>
                    </a>
                </div>
                <div class="col-xs-6 col-sm-2-5">
                    <a href="@Url.Action("Index","Tickets",new {priorityId = 2})">
                        <i class="fa fa-ambulance fa-4x"></i>
                        <h2 class="countTo font-raleway timer" id="myCriticalCount">0</h2>
                        <p>CRITICAL TICKETS</p>
                    </a>
                </div>
                <div class="col-xs-6 col-sm-2-5">
                    <a href="@Url.Action("Index","Tickets",new {priorityId = 3})">
                        <i class="fa fa-frown-o fa-4x"></i>
                        <h2 class="countTo font-raleway timer" id="myMinorCount">0</h2>
                        <p>MINOR TICKETS</p>
                    </a>
                </div>
                <div class="col-xs-6 col-sm-2-5">
                    <a href="@Url.Action("Index","Tickets",new {priorityId = 1002})">
                        <i class="fa fa-user-plus fa-4x"></i>
                        @*<i class="fa fa-adjust fa-4x"></i>*@
                        <h2 class="countTo font-raleway timer" id="myWishListCount">0</h2>
                        <p>WISHLIST TICKETS</p>
                    </a>
                </div>
                <div class="col-xs-6 col-sm-2-5">
                    <a href="@Url.Action("Index","Tickets",new {priorityId = 1003})">
                        <i class="fa fa-edit fa-4x"></i>
                        <h2 class="countTo font-raleway timer" id="enhancementCount">0</h2>
                        <p>ENHANCEMENT TICKETS</p>
                    </a>
                </div>
            </div>
        </div>
    </section>
    <!-- /COLOR BOXES -->
    <script src="~/Scripts/jquery-1.11.3.min.js"></script>
    <script src="~/Scripts/jquery.countTo.js"></script>
    
       
    if (User.IsInRole("Admin") || User.IsInRole("Guest")) {
        
        
    <script type="text/javascript">

    jQuery(function ($) {
        $('#myBlockerCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => s.TicketPriorityId == 1).Count(),
                    speed: 1000
                });
            }
        });
        $('#myCriticalCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => s.TicketPriorityId == 2).Count(),
                    speed: 1000
                });
            }
        });
        $('#myMinorCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => s.TicketPriorityId == 3).Count(),
                    speed: 1000
                });
            }
        });
        $('#enhancementCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => s.TicketPriorityId == 1002).Count(),
                    speed: 1000
                });
            }
        });
        $('#myWishListCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => s.TicketPriorityId == 1003).Count(),
                    speed: 1000
                });
            }
        });
        $('.timer').each(count);
        // restart a timer when a button is clicked
        $('.restart').click(function (event) {
            event.preventDefault();
            var target = $(this).data('target');
            $(target).countTo('restart');
        });

        function count(options) {
            var $this = $(this);
            options = $.extend({}, options || {}, $this.data('countToOptions') || {});
            $this.countTo(options);
        }
    });
</script>
        }
        else { 
    <script type="text/javascript">

    jQuery(function ($) {
        $('#myBlockerCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => (s.TicketPriorityId == 1 && s.TicketStatusId != 4 && s.AssignedToUserId == User.Identity.GetUserId())).Count(),
                    speed: 1000
                });
            }
        });

        $('#myCriticalCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => (s.TicketPriorityId == 2 && s.TicketStatusId != 4 && s.AssignedToUserId == User.Identity.GetUserId())).Count(),
                    speed: 1000
                });
            }
        });

        $('#myMinorCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => (s.TicketPriorityId == 3 && s.TicketStatusId != 4 && s.AssignedToUserId == User.Identity.GetUserId())).Count(),
                    speed: 1000
                });
            }
        });

        $('#enhancementCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => (s.TicketPriorityId == 1002 && s.TicketStatusId != 4 && s.AssignedToUserId == User.Identity.GetUserId())).Count(),
                    speed: 1000
                });
            }
        });

        $('#myWishListCount').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Tickets.Where(s => (s.TicketPriorityId == 1003 && s.TicketStatusId != 4 && s.AssignedToUserId == User.Identity.GetUserId())).Count(),
                    speed: 1000
                });
            }
        });

        $('#commentCount2').data('countToOptions', {
            onComplete: function (value) {
                count.call(this, {
                    from: value,
                    to: @Model.Comments.Count(),
                    speed: 2000
                });
            }
        });

        // custom formatting example
        //$('#earth').data('countToOptions', {
        //    formatter: function (value, options) {
        //        return value.toFixed(options.decimals).replace(/\B(?=(?:\d{3})+(?!\d))/g, ',');
        //    }
        //});

        // start all the timers
        $('.timer').each(count);

        // restart a timer when a button is clicked
        $('.restart').click(function (event) {
            event.preventDefault();
            var target = $(this).data('target');
            $(target).countTo('restart');
        });

        function count(options) {
            var $this = $(this);
            options = $.extend({}, options || {}, $this.data('countToOptions') || {});
            $this.countTo(options);
        }
    });
    </script>
        }
}
